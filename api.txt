API Documentation
-----------------

- POST **/api/users**

    Register a new user.<br>
    The body must contain a JSON object that defines `username` and `password` fields.<br>
    On success a status code 201 is returned. The body of the response contains a JSON object with the newly added user. A `Location` header contains the URI of the new user.<br>
    On failure status code 400 (bad request) is returned.<br>
    Notes:
    - The password is hashed before it is stored in the database. Once hashed, the original password is discarded.
    - In a production deployment secure HTTP must be used to protect the password in transit.

- GET **/api/users/&lt;int:id&gt;**

    Return a user.<br>
    On success a status code 200 is returned. The body of the response contains a JSON object with the requested user.<br>
    On failure status code 400 (bad request) is returned.

- GET **/api/token**

    Return an authentication token.<br>
    This request must be authenticated using a HTTP Basic Authentication header.<br>
    On success a JSON object is returned with a field `token` set to the authentication token for the user and a field `duration` set to the (approximate) number of seconds the token is valid.<br>
    On failure status code 401 (unauthorized) is returned.

- GET **/api/resource**

    Return a protected resource.<br>
    This request must be authenticated using a HTTP Basic Authentication header. Instead of username and password, the client can provide a valid authentication token in the username field. If using an authentication token the password field is not used and can be set to any value.<br>
    On success a JSON object with data for the authenticated user is returned.<br>
    On failure status code 401 (unauthorized) is returned.

Example
-------

The following `curl` command registers a new user with username `miguel` and password `python`:

    ###get identify code
    $curl -i -X GET http://192.168.3.12:8000/v1/users/register?accout=13889131111
    HTTP/1.1 200 OK
    Server: nginx/1.4.6 (Ubuntu)
    Date: Sat, 29 Aug 2015 13:19:43 GMT
    Content-Type: application/json
    Content-Length: 29
    Connection: keep-alive

    {
      "identify_code": 315053
    }
    ###register
    $curl -i -X POST -H "Content-Type: application/json" -d '{"accout":"13889131111","identify_code":"111111","passwd":"caicai"}' http://192.168.3.12:8000/v1/users/register
    HTTP/1.0 200 OK
    Content-Type: application/json
    Content-Length: 29
    Server: Werkzeug/0.10.4 Python/2.7.6
    Date: Sat, 29 Aug 2015 14:15:49 GMT

    {
    "accout": "13889131111"
    }

    $curl -i -X GET http://192.168.3.12:8000/v1/users/jincm?token=other_user_token

    #login
    $curl -i -X POST -H "Content-Type: application/json" -d '{"accout":"13889131111","passwd":"caicai"}' http://192.168.3.12:8000/v1/users/login
    HTTP/1.0 200 OK
    Content-Type: application/json
    Content-Length: 279
    Server: Werkzeug/0.10.4 Python/2.7.6
    Date: Sun, 30 Aug 2015 14:01:15 GMT

    {
      "login": "13889131111",
      "object_id": "55e1e7f2ce6a3d2e00e9b6d5",
      "token": "eyJhbGciOiJIUzI1NiIsImV4cCI6MTQ0MDk0OTI3NSwiaWF0IjoxNDQwOTQzMjc1fQ.eyJwYXNzd29yZCI6ImNhaWNhaSIsIm9iamVjdF9pZCI6IjU1ZTFlN2YyY2U2YTNkMmUwMGU5YjZkNSJ9.a3ZG9j62q9L_9tSOqx2n_-iSQ-LCy1doVxTLLBf7Hqs"
    }
    $curl -i -X GET http://192.168.3.12:8000/v1/users/logout/jincm?token=1111
    HTTP/1.0 200 OK
    Content-Type: application/json
    Content-Length: 23
    Server: Werkzeug/0.10.4 Python/2.7.6
    Date: Sat, 29 Aug 2015 15:47:18 GMT

    {
      "logout": "jincm"
    }
    $curl -i -X POST -H "Content-Type: application/json" -d '{"content":"my first post"}' http://192.168.3.12:8000/v1/activity/post?token=eyJhbGciOiJIUzI1NiIsImV4cCI6MTQ0MDkwOTQ5OSwiaWF0IjoxNDQwOTAzNDk5fQ.eyJwYXNzd29yZCI6ImNhaWNhaSIsIm9iamVjdF9pZCI6IjU1ZTFlN2YyY2U2YTNkMmUwMGU5YjZkNSJ9.d59DL80LaaRQCl62aXv24h9Pfexb7VO7z6_FjeqG_eo
    HTTP/1.0 200 OK
    Content-Type: application/json
    Content-Length: 43
    Set-Cookie: session=eyJfaWQiOnsiIGIiOiJaRFl5T0Rrd09UQTVNbUV4WkRnNVpUY3dOV1EzWWpnMFpXTmhOR05pTmpRPSJ9fQ.CMQGQg.HPs20DWxD1se8l3Ex-fwpEnRiDU; HttpOnly; Path=/
    Server: Werkzeug/0.10.4 Python/2.7.6
    Date: Sun, 30 Aug 2015 03:13:06 GMT

    {
      "post_id": "55e274c2ce6a3d309e2fbfc1"
    }

    $curl -i -X POST -F "action=upload" -F "filename=@file.tar.gz" http://192.168.3.12:8000/v1/users/upload?token=$TOKEN

Finally, to avoid sending username and password with every request an authentication token can be requested:

    $ curl -u miguel:python -i -X GET http://127.0.0.1:5000/api/token
    HTTP/1.0 200 OK
    Content-Type: application/json
    Content-Length: 139
    Server: Werkzeug/0.9.4 Python/2.7.3
    Date: Thu, 28 Nov 2013 20:04:15 GMT

    {
      "duration": 600,
      "token": "eyJhbGciOiJIUzI1NiIsImV4cCI6MTM4NTY2OTY1NSwiaWF0IjoxMzg1NjY5MDU1fQ.eyJpZCI6MX0.XbOEFJkhjHJ5uRINh2JA1BPzXjSohKYDRT472wGOvjc"
    }

And now during the token validity period there is no need to send username and password to authenticate anymore:

    $ curl -u eyJhbGciOiJIUzI1NiIsImV4cCI6MTM4NTY2OTY1NSwiaWF0IjoxMzg1NjY5MDU1fQ.eyJpZCI6MX0.XbOEFJkhjHJ5uRINh2JA1BPzXjSohKYDRT472wGOvjc:x -i -X GET http://127.0.0.1:5000/api/resource
    HTTP/1.0 200 OK
    Content-Type: application/json
    Content-Length: 30
    Server: Werkzeug/0.9.4 Python/2.7.3
    Date: Thu, 28 Nov 2013 20:05:08 GMT

    {
      "data": "Hello, miguel!"
    }

Once the token expires it cannot be used anymore and the client needs to request a new one. Note that in this last example the password is arbitrarily set to `x`, since the password isn't used for token authentication.

An interesting side effect of this implementation is that it is possible to use an unexpired token as authentication to request a new token that extends the expiration time. This effectively allows the client to change from one token to the next and never need to send username and password after the initial token was obtained.